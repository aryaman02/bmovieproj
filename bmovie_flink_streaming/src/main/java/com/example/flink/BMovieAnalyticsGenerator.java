package com.example.flink;

import com.example.generator.BMovieSeenEvent;
import com.example.kafka.BMovieGenreEvent;
import com.example.kafka.FlinkSeenEventDeserializer;
import org.apache.flink.api.common.RuntimeExecutionMode;
import org.apache.flink.api.common.eventtime.WatermarkStrategy;
import org.apache.flink.api.common.functions.FilterFunction;
import org.apache.flink.api.java.tuple.Tuple3;
import org.apache.flink.api.java.utils.ParameterTool;
import org.apache.flink.connector.kafka.source.KafkaSource;
import org.apache.flink.connector.kafka.source.enumerator.initializer.OffsetsInitializer;
import org.apache.flink.connector.kafka.source.reader.deserializer.KafkaRecordDeserializationSchema;
import org.apache.flink.contrib.streaming.state.EmbeddedRocksDBStateBackend;
import org.apache.flink.streaming.api.CheckpointingMode;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.CheckpointConfig;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.windowing.assigners.TumblingProcessingTimeWindows;
import org.apache.flink.streaming.api.windowing.time.Time;
import org.apache.flink.streaming.connectors.cassandra.CassandraSink;
import scala.App;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class BMovieAnalyticsGenerator {
    private static final String CONNECTION_STRING = "%s:9092";
    private static final String CASSANDRA_IP = "127.0.0.1";
    private static final String CONSUME_TOPIC_NAME = "bmovie_seen_events";
    private static final String GROUP_ID = "event_processor";
    private static final Set<String> INDIAN_STATES = new HashSet<>(Arrays
        .asList("AN", "AP", "AR", "AS", "BR", "CH", "CT", "DN", "DD", "DL", "GA", "GJ", "HR", "HP", "JK", "JH", "KA",
            "KL", "LD", "MP", "MH", "MN", "ML", "MZ", "NL", "OR", "PY", "PB", "RJ", "SK", "TN", "TG", "TR", "UP", "UT",
            "WB"));
    private static Object ParameterTool;

    public static void main(String[] args) throws Exception {

        var appConfig = new AppConfig();
        var parameters = ParameterTool.fromArgs(args);
        var kafkaBroker = parameters.get("kafka-brokers");
        var m = parameters.get("kafka-brokers");
        appConfig.addProperty("kafkaAddress", kafkaBroker);
        appConfig.addProperty("mongoAddress", kafkaBroker);

        // 1. Obtain an execution environment
        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

        env.getConfig().setGlobalJobParameters(parameters);

        env.setRuntimeMode(RuntimeExecutionMode.STREAMING);
        env.setMaxParallelism(120);

        /**
         * Checkpoint config
         */
        env.getCheckpointConfig().setCheckpointingMode(CheckpointingMode.EXACTLY_ONCE);
        env.getCheckpointConfig().setTolerableCheckpointFailureNumber(10);
        env.getCheckpointConfig().setMinPauseBetweenCheckpoints(10000);
        env.getCheckpointConfig().setExternalizedCheckpointCleanup(CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION);

        /**
         * State backend for stateful processing
         */
        env.setStateBackend(new EmbeddedRocksDBStateBackend());

        env.getConfig().setAutoWatermarkInterval(1000L);

        env.getConfig().disableAutoGeneratedUIDs();

        // 2. Load/create the initial data
        KafkaSource<BMovieSeenEvent> source = KafkaSource.<BMovieSeenEvent>builder()
            .setBootstrapServers(kafkaBroker)
            .setTopics(CONSUME_TOPIC_NAME).setGroupId(GROUP_ID).setStartingOffsets(OffsetsInitializer.earliest())
            .setDeserializer(KafkaRecordDeserializationSchema.of(new FlinkSeenEventDeserializer())).build();

        // String.format(CONNECTION_STRING, BMovieConfigProps.getKafkaAddress())

        DataStream<BMovieSeenEvent> sourceDataStream = env.fromSource(source, WatermarkStrategy.noWatermarks(), "BMovieSeenEvents Kafka Source")
            .uid("kafka-source-id");

        // 3. Specify transformations on this data
        DataStream<BMovieSeenEvent> goodBMovieSeenEvents = sourceDataStream.filter((FilterFunction<BMovieSeenEvent>) event -> {
                boolean filterCondition = (event.getUserRating() >= 0.0 && event.getUserRating() <= 10.0 && INDIAN_STATES.contains(event.getbMovSeenLocation()) &&
                    event.getTicketPrice() >= 30 && event.getTicketPrice() <= 180);
                return filterCondition;
            }).uid("filter-id"); // only retain good bMovSeenEvents from original datastream

        DataStream<BMovieGenreEvent> bMovGenreEvents = goodBMovieSeenEvents.flatMap(new BMovieSeenEventEnricher()).uid("enricher-id");

        DataStream<Long> aggregatedAvgRatingStats = bMovGenreEvents
            .windowAll(TumblingProcessingTimeWindows.of(Time.seconds(30L)))
            .process(new AggregatorFunctionGenre()).uid("avg_rating_window-id"); // NOT writing to cassandra sink here!

        DataStream<Tuple3<Long, Long, String>> aggregatedMovieStats = goodBMovieSeenEvents.keyBy(event -> event.getImdbID())
            .process(new AggregatorFunctionId()).uid("key_imdb-id"); // viewcount and collection earnings aggregator with key imdbid

        DataStream<Tuple3<String, Long, Long>> mostWatchedGenreStats = bMovGenreEvents
            .windowAll(TumblingProcessingTimeWindows.of(Time.seconds(30L)))
            .apply(new GenreWatchedAggregatorFunction()).uid("most_watched_window-id");

        // 4. Specify where to put the results of your computations
        //aggregatedViewCounts.print().uid("print-id");
        /*
        CassandraSink.addSink(aggregatedMovieStats)
            .setQuery("UPDATE bmovie_streaming_data.general_movie_stats SET num_views = ?, collection_earnings = ? WHERE imdbid = ?;")
            .setHost(CASSANDRA_IP)
            .build().uid("cassandra_general_stats-id");

        CassandraSink.addSink(mostWatchedGenreStats)
            .setQuery("INSERT INTO bmovie_streaming_data.watched_genre_stats(genre, timestamp, max_count) values (?, ?, ?);")
            .setHost(CASSANDRA_IP)
            .build().uid("cassandra_watched_genre_stats-id");*/

        // 5. Trigger the program execution
        env.execute("BMovieAnalyticsGenerator");
    }
}
